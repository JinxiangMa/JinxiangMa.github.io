<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Beautiful English Sentences</title>
    <url>/2020/02/21/English-sentence/</url>
    <content><![CDATA[<p>remind you</p>
<a id="more"></a>

<p><img src="/2020/02/21/English-sentence/2.jpg" alt></p>
<h3 id="All-of-life-is-an-act-of-letting-go-but-what-hurts-the-most-is-not-taking-time-to-say-gooodbye"><a href="#All-of-life-is-an-act-of-letting-go-but-what-hurts-the-most-is-not-taking-time-to-say-gooodbye" class="headerlink" title="All of life is an act of letting go, but what hurts the most is not taking time to say gooodbye."></a>All of life is an act of letting go, but what hurts the most is not taking time to say gooodbye.</h3><p><img src="/2020/02/21/English-sentence/1.jpg" alt></p>
<h3 id="Instead-of-admintting-that-the-truth-of-“let-it-be”-is-to-readily-accept-any-kind-of-outcome-after-making-full-effforts-rather-than-to-da-nothing-at-the-very-begining-we’d-rather-take-“let-it-be”-as-an-excuse-te-evade-the-path-of-thorns-in-our-life"><a href="#Instead-of-admintting-that-the-truth-of-“let-it-be”-is-to-readily-accept-any-kind-of-outcome-after-making-full-effforts-rather-than-to-da-nothing-at-the-very-begining-we’d-rather-take-“let-it-be”-as-an-excuse-te-evade-the-path-of-thorns-in-our-life" class="headerlink" title="Instead of admintting that the truth of “let it be” is to readily accept any kind of outcome after making full effforts rather than to da nothing at the very begining, we’d rather take “let it be” as an excuse te evade the path of thorns in our life."></a>Instead of admintting that the truth of “let it be” is to readily accept any kind of outcome after making full effforts rather than to da nothing at the very begining, we’d rather take “let it be” as an excuse te evade the path of thorns in our life.</h3>]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>git部署</title>
    <url>/2020/05/17/git%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr>
<h3 id="Git操作失败并提示Another-git-process-seems-to-be-running-in-this……"><a href="#Git操作失败并提示Another-git-process-seems-to-be-running-in-this……" class="headerlink" title="Git操作失败并提示Another git process seems to be running in this……"></a>Git操作失败并提示Another git process seems to be running in this……</h3><p>Git操作的过程中突然显示Another git process semms to be running in this repository, e.g. an editor opened by ‘git commit’. Please make sure all processes are terminated then try again. If it still fails, a git process remove the file manually to continue… </p>
<blockquote>
<p>git被另外一个程序占用，重启机器也不能够解决。</p>
</blockquote>
<h4 id="原因在于Git在使用过程中遭遇了奔溃，部分被上锁资源没有被释放导致的。"><a href="#原因在于Git在使用过程中遭遇了奔溃，部分被上锁资源没有被释放导致的。" class="headerlink" title="原因在于Git在使用过程中遭遇了奔溃，部分被上锁资源没有被释放导致的。"></a>原因在于Git在使用过程中遭遇了奔溃，部分被上锁资源没有被释放导致的。</h4><p>解决方案：进入项目文件夹下的 .git文件中（显示隐藏文件夹或rm .git/index.lock）删除index.lock文件即可。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>《python编程—从入门到实践》笔记（一）</title>
    <url>/2020/05/17/python%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>人生苦短，我用python</p>
<a id="more"></a>
<h4 id="2-3-字符串"><a href="#2-3-字符串" class="headerlink" title="2-3 字符串"></a>2-3 字符串</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"\n"</span>)   <span class="comment"># print函数自动换行</span></span><br><span class="line"><span class="comment"># 该变量的前后有多个空白</span></span><br><span class="line">name=<span class="string">"  Wu Jia hui   "</span>  <span class="comment"># 字符串可用单引号，也可用双引号，可在字符串中灵活包含引号</span></span><br><span class="line">print(name)</span><br><span class="line">print(<span class="string">"Hello "</span>+name)</span><br><span class="line">print(name+<span class="string">"Hello"</span>)</span><br><span class="line">print(name.lower())</span><br><span class="line">print(name.upper())</span><br><span class="line">print(name.title())</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line">print(name.rstrip()+<span class="string">"Hello"</span>)      <span class="comment"># 删除字符串末尾空白</span></span><br><span class="line">print(name.lstrip())</span><br><span class="line">print(<span class="string">"\t"</span>)               <span class="comment"># 注意换行</span></span><br><span class="line">print(<span class="string">"\t name"</span>+name)     <span class="comment"># 这种删除只是暂时的，不改变原变量值，若要使用赋值给另一个变量</span></span><br><span class="line">print(name.strip())  <span class="comment"># 同时剔除字符串两端的空白</span></span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/17/python%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/01.png" alt></p>
<hr>
<h4 id="2-4-数字"><a href="#2-4-数字" class="headerlink" title="2.4 数字"></a>2.4 数字</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">print(<span class="number">3</span>/<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"3/2="</span>+str(<span class="number">3</span>/<span class="number">2</span>))     </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">检查python将数字解读为数值或字符串,需要转换是因为字符串拼接符</span></span><br><span class="line"><span class="string">python2作整除运算——3.0/2=1.5（至少有一个浮点数）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(<span class="string">"乘方运算：3的2次方"</span>+str(<span class="number">3</span>**<span class="number">2</span>))  <span class="comment">#表达式中空格不影响运算，便于阅读代码</span></span><br><span class="line"><span class="keyword">import</span> this    <span class="comment"># python之禅</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/17/python%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/02.png" alt></p>
<hr>
<h3 id="3-列表"><a href="#3-列表" class="headerlink" title="3 列表"></a>3 列表</h3><blockquote>
<p>列表是动态变化的</p>
</blockquote>
<h4 id="3-2-列表的增删"><a href="#3-2-列表的增删" class="headerlink" title="3.2 列表的增删"></a>3.2 列表的增删</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">people = [<span class="string">"Ma"</span>,<span class="string">"Li"</span>,<span class="string">"Zeng"</span>,<span class="string">"Wu"</span>,<span class="string">'Song'</span>]</span><br><span class="line">print(people)  <span class="comment"># 打印包括方括号</span></span><br><span class="line">print(people[<span class="number">-1</span>])   <span class="comment"># 访问元素索引从0开始，当列表为空时，才会出错</span></span><br><span class="line">absent= <span class="string">"Zeng"</span>   <span class="comment"># 根据值删除元素，可将被删除的元素保存在变量中，接着使用</span></span><br><span class="line">people.remove(absent)</span><br><span class="line"><span class="keyword">del</span> people[<span class="number">0</span>]   <span class="comment"># 删除元素，删除后无法访问</span></span><br><span class="line">print(people)</span><br><span class="line">present = <span class="string">"Zhao"</span></span><br><span class="line">people.append(present)   <span class="comment"># 在列表末尾添加元素或者创建空列表逐一加入元素</span></span><br><span class="line">people.insert(<span class="number">1</span>,<span class="string">"Deng"</span>)    <span class="comment"># 在指定位置添加元素</span></span><br><span class="line">print(people)</span><br><span class="line">poped_person= people.pop(<span class="number">0</span>)  <span class="comment"># 返回删除的元素</span></span><br><span class="line">print(<span class="string">"the person can not come: "</span>+ poped_person)</span><br><span class="line">print(people)</span><br><span class="line">people.pop(<span class="number">0</span>)</span><br><span class="line">people.pop(<span class="number">0</span>)</span><br><span class="line">people.pop()  <span class="comment"># 未指定索引值则删除列表最后一个值</span></span><br><span class="line">people.pop()  <span class="comment">#对同一个列表连续用pop删除（删除列表）,列表是动态变化的</span></span><br><span class="line">print(people)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/17/python%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/3_2.png" alt></p>
<h4 id="3-3-列表的组织"><a href="#3-3-列表的组织" class="headerlink" title="3.3 列表的组织"></a>3.3 列表的组织</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">people=[<span class="string">"Aa"</span>,<span class="string">"Ci"</span>,<span class="string">"Beng"</span>,<span class="string">"Zu"</span>,<span class="string">'Hong'</span>]</span><br><span class="line">print(people) </span><br><span class="line">people.reverse()    <span class="comment"># 永久性倒着打印列表，与字母顺序无关——若恢复则再次反转</span></span><br><span class="line">print(people)    </span><br><span class="line">people.sort()   <span class="comment"># 按顺序对列表进行永久性排列</span></span><br><span class="line">print(people)</span><br><span class="line">people.sort(reverse=<span class="literal">True</span>)   <span class="comment"># 永久性倒序排列</span></span><br><span class="line">print(sorted(people,reverse=<span class="literal">True</span>))</span><br><span class="line">print(sorted(people))  <span class="comment"># 对列表进行临时排序，也可传入参数倒序排列</span></span><br><span class="line">print(people)  </span><br><span class="line">print(len(people))     <span class="comment"># 函数len返回列表长度</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/17/python%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/3_3.png" alt></p>
<hr>
<h3 id="4-操作列表"><a href="#4-操作列表" class="headerlink" title="4 操作列表"></a>4 操作列表</h3><h4 id="4-1-遍历列表"><a href="#4-1-遍历列表" class="headerlink" title="4.1 遍历列表"></a>4.1 遍历列表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">people=[<span class="string">"Aa"</span>,<span class="string">"Ci"</span>,<span class="string">"Beng"</span>,<span class="string">"Zu"</span>,<span class="string">'Hong'</span>]</span><br><span class="line">print(people) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">用for语句完成对列表的遍历——取出元素储存在person变量中</span></span><br><span class="line"><span class="string">每一个元素都执行指定的操作</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> person <span class="keyword">in</span> people:  </span><br><span class="line"><span class="comment"># 注意冒号标志着一个代码块</span></span><br><span class="line"><span class="comment"># 缩进表示代码块的内容</span></span><br><span class="line"><span class="comment"># 不必要的缩进会报错</span></span><br><span class="line">    print(person)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/17/python%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/4_1.png" alt></p>
<h4 id="4-3-数值列表"><a href="#4-3-数值列表" class="headerlink" title="4.3 数值列表"></a>4.3 数值列表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 函数range(a,b)生成a到b-1的数字，再加一个参数指定步长</span></span><br><span class="line"><span class="comment"># 函数list将参数range的一系列数字转化为数字列表——相当于强制类型转换</span></span><br><span class="line">number = list(range(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">print(number)</span><br><span class="line">print(<span class="string">"创建一个包含前10个整数的平方的列表"</span>)</span><br><span class="line">square = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">1</span>):</span><br><span class="line">    i=i**<span class="number">2</span></span><br><span class="line">    square.append(i)</span><br><span class="line">print(square)</span><br><span class="line"><span class="comment"># 对于数字列表的统计计算</span></span><br><span class="line">print(min(square))  <span class="comment"># 最小值</span></span><br><span class="line">print(max(square))  <span class="comment"># 最大值</span></span><br><span class="line">print(sum(square))  <span class="comment"># 总和</span></span><br><span class="line"><span class="comment"># 列表解析</span></span><br><span class="line">value = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>)]</span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/17/python%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/4_3.png" alt></p>
<h4 id="4-4-使用列表的一部分"><a href="#4-4-使用列表的一部分" class="headerlink" title="4.4 使用列表的一部分"></a>4.4 使用列表的一部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">people=[<span class="string">"Aa"</span>,<span class="string">"Ci"</span>,<span class="string">"Beng"</span>,<span class="string">"Zu"</span>,<span class="string">'Hong'</span>]</span><br><span class="line">print(people[<span class="number">0</span>:<span class="number">3</span>])   <span class="comment"># 创建切片，方框中是冒号</span></span><br><span class="line">print(people[<span class="number">2</span>:<span class="number">3</span>])</span><br><span class="line">print(people[:len(people)])  <span class="comment"># 没有指定索引从头/到末尾开始打印</span></span><br><span class="line"><span class="comment"># 切片的遍历</span></span><br><span class="line"><span class="keyword">for</span> person <span class="keyword">in</span> people[<span class="number">-3</span>:]:</span><br><span class="line">    print(person)</span><br><span class="line">print(<span class="string">"赋值列表"</span>)</span><br><span class="line">number = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>)]</span><br><span class="line">print(number)</span><br><span class="line">number_test = number  </span><br><span class="line"><span class="comment"># 直接赋值赋值相当于关联同一个实体，当原列表发生永久性操作，该列表也发生变化</span></span><br><span class="line">print(number_test)</span><br><span class="line">number.pop()</span><br><span class="line">print(number_test)</span><br><span class="line">print(<span class="string">"复制列表"</span>)  <span class="comment"># 用切片复制</span></span><br><span class="line">number_copy = number[:]</span><br><span class="line">print(number)</span><br><span class="line">print(number_copy)</span><br><span class="line">number.pop()</span><br><span class="line">print(number)</span><br><span class="line">print(number_copy)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/17/python%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/4_4.png" alt></p>
<h4 id="4-5-元组"><a href="#4-5-元组" class="headerlink" title="4.5 元组"></a>4.5 元组</h4><blockquote>
<p>不可变的列表<br>用括号括起来<br>可给储存元组的变量赋值，间接改变元组的值</p>
<blockquote>
<p>dimession = (0,5)<br>dimession = (10,15）</p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dimession = (<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">print(dimession[<span class="number">0</span>])</span><br><span class="line">print(dimession[<span class="number">1</span>])</span><br><span class="line">dimession[<span class="number">0</span>] = <span class="number">300</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/17/python%E7%BC%96%E7%A8%8B%E2%80%94%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/4_5.png" alt></p>
<hr>
]]></content>
      <categories>
        <category>python编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《python编程—从入门到实践》笔记(二)</title>
    <url>/2020/05/19/python%E7%BC%96%E7%A8%8B%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%20%E7%AC%94%E8%AE%B0(%E4%BA%8C)/</url>
    <content><![CDATA[<blockquote>
<p><strong>我就是一个打工仔！！！</strong> </p>
</blockquote>
<a id="more"></a>
<h3 id="5-if语句"><a href="#5-if语句" class="headerlink" title="5.if语句"></a>5.if语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">cars = [<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'subaru'</span>, <span class="string">'toyota'</span>] </span><br><span class="line">cars_test = []</span><br><span class="line"><span class="keyword">if</span> cars_test:</span><br><span class="line">    print(<span class="string">"列表含有元素"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"列表为空"</span>)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"><span class="comment"># 注意代码块的冒号</span></span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    <span class="keyword">if</span> car==<span class="string">"audi"</span>:    <span class="comment">#条件测试==：True/False，检查是否相等时区分大小写</span></span><br><span class="line">        print(car.title())</span><br><span class="line">    <span class="keyword">else</span>:               <span class="comment">#条件测试：!=</span></span><br><span class="line">        print(car.upper())      <span class="comment"># 函数upper不会改变原变量的值</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">"defe"</span> <span class="keyword">not</span> <span class="keyword">in</span> cars:  <span class="comment">#检查特定值是否包含在列表中</span></span><br><span class="line">    print(<span class="string">"defe不在列表中"</span>)</span><br><span class="line">print(cars)</span><br><span class="line">print(<span class="string">"\n与，或逻辑符"</span>)</span><br><span class="line">age_0 = <span class="number">21</span></span><br><span class="line">age_1 = <span class="number">40</span></span><br><span class="line">age_2 = <span class="number">35</span></span><br><span class="line"><span class="keyword">if</span> age_0 &lt;= age_1 <span class="keyword">and</span> age_0 &gt;= age_2:</span><br><span class="line">    print(<span class="string">"True——and测试"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"False——and测试"</span>)</span><br><span class="line"><span class="keyword">if</span> age_0&lt;=age_1 <span class="keyword">or</span> age_0&gt;=age_2:</span><br><span class="line">    print(<span class="string">"or测试"</span>)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"><span class="comment"># if-elif-else：有一个测试就跳过1余下的测试</span></span><br><span class="line">age = <span class="number">15</span></span><br><span class="line"><span class="keyword">if</span>(age&lt;<span class="number">4</span>):</span><br><span class="line">    print(<span class="string">"小于4"</span>)</span><br><span class="line"><span class="keyword">elif</span> age&lt;<span class="number">10</span>:</span><br><span class="line">    print(<span class="string">"小于10"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"大于10"</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">多个elif代码块：</span></span><br><span class="line"><span class="string">if 条件1：</span></span><br><span class="line"><span class="string">   。。。</span></span><br><span class="line"><span class="string">elif 条件2：</span></span><br><span class="line"><span class="string">   。。。</span></span><br><span class="line"><span class="string">elif 条件3：</span></span><br><span class="line"><span class="string">   。。。</span></span><br><span class="line"><span class="string">elif 条件4：</span></span><br><span class="line"><span class="string">   。。。</span></span><br><span class="line"><span class="string">else：    （else可省略）</span></span><br><span class="line"><span class="string">    。。。</span></span><br><span class="line"><span class="string">多个if代码块</span></span><br><span class="line"><span class="string">每个代码块进行独立的测试</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/19/python%E7%BC%96%E7%A8%8B%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%20%E7%AC%94%E8%AE%B0(%E4%BA%8C)/5.png" alt></p>
<hr>
<h3 id="6-字典"><a href="#6-字典" class="headerlink" title="6.字典"></a>6.字典</h3><h4 id="6-1初始字典"><a href="#6-1初始字典" class="headerlink" title="6.1初始字典"></a>6.1初始字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 字典：&#123;&#125;,相关联的键值对：</span></span><br><span class="line">alien_0 = &#123;<span class="string">"color"</span>:<span class="string">"green"</span>,<span class="string">"points"</span>:<span class="number">5</span>&#125;</span><br><span class="line">print(alien_0)</span><br><span class="line">print(alien_0[<span class="string">"color"</span>])  <span class="comment"># 访问字典中的值</span></span><br><span class="line">print(alien_0[<span class="string">"points"</span>])</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"><span class="comment"># 字典是动态结构</span></span><br><span class="line">alien_0[<span class="string">"x_position"</span>] = <span class="number">0</span>  </span><br><span class="line"><span class="comment">#与访问字典类似，键值对的添加顺序与排列顺序不同</span></span><br><span class="line">alien_0[<span class="string">"y_position"</span>] = <span class="number">25</span></span><br><span class="line">print(alien_0)</span><br><span class="line"><span class="comment"># 永远删除键值对</span></span><br><span class="line">print(alien_0)</span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">"color"</span>]</span><br><span class="line">print(alien_0)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/19/python%E7%BC%96%E7%A8%8B%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%20%E7%AC%94%E8%AE%B0(%E4%BA%8C)/6_1.png" alt></p>
<h4 id="6-3-遍历字典"><a href="#6-3-遍历字典" class="headerlink" title="6.3 遍历字典"></a>6.3 遍历字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">"username"</span>:<span class="string">"efemi"</span>,</span><br><span class="line">    <span class="string">"first"</span>:<span class="string">"enrico"</span>,</span><br><span class="line">    <span class="string">"last"</span>:<span class="string">"fermi"</span>,</span><br><span class="line">    <span class="string">"second"</span>:<span class="string">"fermi"</span></span><br><span class="line">&#125;</span><br><span class="line">print(user_0)</span><br><span class="line"><span class="comment"># 遍历所有的键值对——方法：items()返回键值对列表</span></span><br><span class="line"><span class="comment"># 键值对的返回顺序与存储顺序不同，只关心关联关系</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> user_0.items():</span><br><span class="line">    print(<span class="string">"\nKey:"</span>+key)</span><br><span class="line">    print(<span class="string">"\nValue:"</span>+value)</span><br><span class="line"><span class="comment"># 显示遍历字典中的所有键——方法：keys()</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> user_0.keys():</span><br><span class="line">    print(<span class="string">"\n关键值为"</span>+key)</span><br><span class="line">print(<span class="string">"-----------------------"</span>)</span><br><span class="line"><span class="comment"># 隐式遍历字典中的所有键键</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> user_0:</span><br><span class="line">    print(<span class="string">"\n关键值为"</span>+key)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"Wu"</span> <span class="keyword">not</span> <span class="keyword">in</span> user_0.keys():  <span class="comment"># keys()返回一个列表包含所有的键值</span></span><br><span class="line">    print(<span class="string">"Wu not in the Dictionary"</span>)</span><br><span class="line">print(<span class="string">"----------"</span>)</span><br><span class="line"><span class="comment"># 按顺序遍历字典中的所有键</span></span><br><span class="line">print(<span class="string">"按顺序打印所有的键："</span>)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> sorted(user_0.keys()):  <span class="comment"># keys()返回一个列表包含所有的键值</span></span><br><span class="line">    print(key)</span><br><span class="line">print(<span class="string">"-----------"</span>)</span><br><span class="line"><span class="comment"># 遍历字典中的所有值——values()方法返回列表</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> user_0.values():</span><br><span class="line">    print(<span class="string">"第"</span>+str(i)+<span class="string">"个值为："</span>+value)</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">print(i)</span><br><span class="line"><span class="comment"># 集合set()剔除重复项——集合类似于列表，但每个元素是独一无二的</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> set(user_0.values()):</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/19/python%E7%BC%96%E7%A8%8B%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%20%E7%AC%94%E8%AE%B0(%E4%BA%8C)/6.3_png" alt></p>
<h4 id="6-4嵌套"><a href="#6-4嵌套" class="headerlink" title="6.4嵌套"></a>6.4嵌套</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">print(<span class="string">"字典列表"</span>)</span><br><span class="line">alien_0 = &#123;<span class="string">"coloe"</span>:<span class="string">"red"</span>,<span class="string">"points"</span>:<span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">"coloe"</span>:<span class="string">"green"</span>,<span class="string">"points"</span>:<span class="number">15</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">"coloe"</span>:<span class="string">"blue"</span>,<span class="string">"points"</span>:<span class="number">25</span>&#125;</span><br><span class="line">aliens = [alien_0,alien_1,alien_2]</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    print(alien)</span><br><span class="line">print(<span class="string">"-----------\n在字典中存储列表"</span>)</span><br><span class="line"><span class="comment"># 一个键关联到多个值</span></span><br><span class="line"><span class="comment"># 字典与列表层级不应嵌套太多</span></span><br><span class="line">pizza = &#123;</span><br><span class="line">    <span class="string">"color"</span>:<span class="string">"yellow"</span>,</span><br><span class="line">    <span class="string">"staff"</span>:[<span class="string">"sugar"</span>,<span class="string">"water"</span>,<span class="string">"powder"</span>]</span><br><span class="line">&#125;</span><br><span class="line">print(pizza[<span class="string">"staff"</span>])</span><br><span class="line">print(<span class="string">"--------\n在字典中存储字典"</span>)</span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">'user1Ma'</span>:&#123;</span><br><span class="line">        <span class="string">"last"</span>:<span class="string">"Jin"</span>,</span><br><span class="line">        <span class="string">"first"</span>:<span class="string">'Xiang'</span>,</span><br><span class="line">        <span class="string">"location"</span>:<span class="string">"De"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'user2Wu'</span>:&#123;</span><br><span class="line">        <span class="string">"last"</span>:<span class="string">"Jia"</span>,</span><br><span class="line">        <span class="string">"first"</span>:<span class="string">'Fang'</span>,</span><br><span class="line">        <span class="string">"location"</span>:<span class="string">"Lin"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'user3Ma'</span>:&#123;</span><br><span class="line">        <span class="string">"last"</span>:<span class="string">"Jie"</span>,</span><br><span class="line">        <span class="string">"first"</span>:<span class="string">'Tang'</span>,</span><br><span class="line">        <span class="string">"location"</span>:<span class="string">"Ha"</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">print(users)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/19/python%E7%BC%96%E7%A8%8B%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%20%E7%AC%94%E8%AE%B0(%E4%BA%8C)/6_4.png" alt></p>
<hr>
<h3 id="7-用户输入和while循环"><a href="#7-用户输入和while循环" class="headerlink" title="7 用户输入和while循环"></a>7 用户输入和while循环</h3><h4 id="7-1-用户输入"><a href="#7-1-用户输入" class="headerlink" title="7.1 用户输入"></a>7.1 用户输入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">note =<span class="string">"请输入你的数字："</span></span><br><span class="line">message = input(note)</span><br><span class="line">number = int(message)</span><br><span class="line"><span class="keyword">if</span> number % <span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"该数是一个偶数"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"该数是一个奇数"</span>) </span><br><span class="line"><span class="comment"># input函数让程序暂停运行，等待用户输入</span></span><br><span class="line"><span class="comment"># 函数input的参数是提示和说明</span></span><br><span class="line"><span class="comment"># input()返回字符串,可进行强制类型转换int(str)</span></span><br><span class="line"><span class="comment"># 在python2.7获取用户输入用raw_input（）函数，而python2.7中的input函数将输入解读为python代码，并尝试运行他们</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/19/python%E7%BC%96%E7%A8%8B%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%20%E7%AC%94%E8%AE%B0(%E4%BA%8C)/7_1.png" alt></p>
<h4 id="7-2-while循环"><a href="#7-2-while循环" class="headerlink" title="7.2 while循环"></a>7.2 while循环</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">prompt =  <span class="string">'请输入你的信息'</span></span><br><span class="line">prompt +=<span class="string">"\n直到输入'quit'停止"</span></span><br><span class="line">print(prompt)</span><br><span class="line">message = <span class="string">""</span></span><br><span class="line">information = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span>(message!=<span class="string">"quit"</span>):</span><br><span class="line">    message = input(<span class="string">"请输入："</span>)</span><br><span class="line">    <span class="keyword">if</span> message != <span class="string">"quit"</span>:</span><br><span class="line">        information += message</span><br><span class="line">        print(information)</span><br><span class="line">print(information)</span><br><span class="line"><span class="comment"># 使用标志</span></span><br><span class="line"><span class="comment"># 用多个if语句实现不同情况下程序的退出</span></span><br><span class="line">active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">    message_ac = input(<span class="string">"测试：输入你的消息："</span>)</span><br><span class="line">    <span class="keyword">if</span> message_ac == <span class="string">"quit"</span>:</span><br><span class="line">        active = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> message_ac != <span class="string">"quit"</span>:</span><br><span class="line">        print(message_ac)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/19/python%E7%BC%96%E7%A8%8B%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%20%E7%AC%94%E8%AE%B0(%E4%BA%8C)/7_2.png" alt></p>
<h4 id="7-3-使用while-循环来处理列表和字典"><a href="#7-3-使用while-循环来处理列表和字典" class="headerlink" title="7.3 使用while 循环来处理列表和字典"></a>7.3 使用while 循环来处理列表和字典</h4><blockquote>
<p>for循环不应修改其中的元素，否则将导致python难以跟踪其中的元素</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 用while完成对列表的修改</span></span><br><span class="line">unconfired_users = [<span class="string">'Ma'</span>,<span class="string">'Zhao'</span>,<span class="string">"Wu"</span>]</span><br><span class="line">confired_users = []</span><br><span class="line"><span class="keyword">while</span> unconfired_users:  <span class="comment"># 判断列表是否为空</span></span><br><span class="line">    unconfired_users_pop = unconfired_users.pop()</span><br><span class="line">    print(unconfired_users_pop+<span class="string">"该用户已接受验证"</span>)</span><br><span class="line">    confired_users.append(unconfired_users_pop)</span><br><span class="line">print(unconfired_users)</span><br><span class="line">print(confired_users)</span><br><span class="line"><span class="comment"># while与字典</span></span><br><span class="line">responses = &#123;&#125;</span><br><span class="line">response_active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> response_active:</span><br><span class="line">    name = input(<span class="string">"你的名字是："</span>)</span><br><span class="line">    response = input(<span class="string">"你的回答是："</span>)</span><br><span class="line">    responses[name] = response</span><br><span class="line">    last = input(<span class="string">"还有人会回答问题吗："</span>)</span><br><span class="line">    <span class="keyword">if</span> last == <span class="string">"no"</span>:</span><br><span class="line">        response_active = <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> name,response <span class="keyword">in</span> responses.items():</span><br><span class="line">    print(name)</span><br><span class="line">    print(response)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/19/python%E7%BC%96%E7%A8%8B%E2%80%94%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%20%E7%AC%94%E8%AE%B0(%E4%BA%8C)/7_3.png" alt></p>
<hr>
]]></content>
      <categories>
        <category>python编程</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
</search>
